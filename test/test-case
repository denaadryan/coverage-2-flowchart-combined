// TEST CASE 1 LOOP

function decimalToBinary(x) {
  let bin = 0;
  let rem = 0;
  let i = 1;
  let step = 1;
  while (x != 0) {
    rem = x % 2;

    x = parseInt(x / 2);
    bin = bin + rem * i;
    i = i * 10;
  }
  return bin;
}

// console.log(decimalToBinary(-27));
// assert.equal(decimalToBinary(0), 0);
// assert.equal(decimalToBinary(27), 11011);
// assert.equal(decimalToBinary(-27), -11011);

//   if (c == 1) {
//     return true;
//   }
//   return false;
// }

// TEST CASE 3 SWITCH CASE
// Javascript program to convert Roman
// Numerals to Numberspublic
// This function returns value of
// a Roman symbol
// function value(r) {
//   //   if (r == 'I') return 1;
//   //   if (r == 'V') return 5;
//   //   if (r == 'X') return 10;
//   //   if (r == 'L') return 50;
//   //   if (r == 'C') return 100;
//   //   if (r == 'D') return 500;
//   //   if (r == 'M') return 1000;
//   //   return -1;

//   switch (r) {
//     case 'I':
//       return 1;
//       break;
//     case 'V':
//       return 5;
//       break;
//     case 'X':
//       return 10;
//       break;
//     case 'L':
//       return 50;
//       break;
//     case 'C':
//       return 100;
//       break;
//     case 'D':
//       return 500;
//       break;
//     case 'M':
//       return 1000;
//     default:
//       return -1;
//   }
// }

// Finds decimal value of a given
// romal numeral
function romanToDecimal(str) {
  // Initialize result
  var res = 0;

  for (let i = 0; i < str.length; i++) {
    // let i = 0;
    // while (i < str.length) {
    // Getting value of symbol s[i]
    // var s1 = value(str.charAt(i));
    var s1;
    let char = str.charAt(i);
    // switch (str.charAt(i)) {
    switch (char) {
      case 'I':
        s1 = 1;
        break;
      case 'V':
        s1 = 5;
        break;
      case 'X':
        s1 = 10;
        break;
      case 'L':
        s1 = 50;
        break;
      case 'C':
        s1 = 100;
        break;
      case 'D':
        s1 = 500;
        break;
      case 'M':
        s1 = 1000;
        break;
      default:
        return 'invalid roman number';
    }

    // if (s1 == -1) {
    //   return 'invalid roman number';
    // }
    // Getting value of symbol s[i+1]
    if (i + 1 < str.length) {
      //   var s2 = value(str.charAt(i + 1));
      var s2;
      let char2 = str.charAt(i + 1);
      // switch (str.charAt(i + 1)) {
      switch (char2) {
        case 'I':
          s2 = 1;
          break;
        case 'V':
          s2 = 5;
          break;
        case 'X':
          s2 = 10;
          break;
        case 'L':
          s2 = 50;
          break;
        case 'C':
          s2 = 100;
          break;
        case 'D':
          s2 = 500;
          break;
        case 'M':
          s2 = 1000;
          break;
        default:
          return 'invalid roman number';
      }

      // if (s2 == -1) {
      //   return 'invalid roman number';
      // }

      // Comparing both values
      if (s1 >= s2) {
        // Value of current symbol
        // is greater or equalto
        // the next symbol
        res = res + s1;
      } else {
        // Value of current symbol is
        // less than the next symbol
        res = res + s2 - s1;
        i++;
      }
    } else {
      res = res + s1;
    }
    // i++;
  }
  return res;
}

// console.log(romanToDecimal('A'));
// assert.equal(romanToDecimal('AXX'), 'invalid roman number');
// assert.equal(romanToDecimal('XII'), 12);
// assert.equal(romanToDecimal('MDCLXVI'), 1666);
// assert.equal(romanToDecimal('XXA'), 'invalid roman number');

// TEST CASE 4 FOR
function isPrime(n) {
  let c = 0;
  for (let i = 1; i < n; i++) {
    if (n % i == 0) {
      c++;
      if (c > 1) {
        return false;
      }
    }
  }
  if (c == 1) {
    return true;
  }
  return false;
}

// console.log(isPrime(-7));
// assert.equal(isPrime(0), false);
// assert.equal(isPrime(-7), false);
// assert.equal(isPrime(4), false);
// assert.equal(isPrime(7), true);

// TEST CASE 5 if then else
function isOddOrEven(x) {
  if (x % 2 == 0) {
    return 'even number';
  } else {
    return 'odd number';
  }
}

// console.log(isOddOrEven(7));
// assert.equal(isOddOrEven(6), 'even number');
// assert.equal(isOddOrEven(7), 'odd number');

// TEST CASE 6 try catch
function isEnoughBalance(amount) {
  let balance = 50000;
  try {
    if (amount > balance) {
      throw 'insufficient balance';
    } else {
      return 'withdrawal successful';
    }
  } catch (error) {
    console.log(error);
  }
}

// assert.equal(isEnoughBalance(27000), 'withdrawal successful');
// assert.equal(isEnoughBalance(75000), 'insufficient balance');

// TEST CASE 7 do while

function factorial(number) {
  if (number < 0) {
    // console.log('Error! Factorial for negative number does not exist.');
    return null;
  }

  // if number is 0
  else if (number === 0) {
    // console.log(`The factorial of ${number} is 1.`);
    return 1;
  }

  // if number is positive
  else {
    let fact = 1;
    // for (i = 1; i <= number; i++) {
    //   fact *= i;
    // }
    let i = 1;
    do {
      fact *= i;
      i++;
    } while (i <= number);

    // console.log(`The factorial of ${number} is ${fact}.`);
    return fact;
  }
}

// assert.equal(factorial(-1), null);
// assert.equal(factorial(0), 1);
// assert.equal(factorial(5), 120);

// TEST CASE 8 SEKUENSIAL
function celsiusToFahrenheit(celsius) {
  var fahrenheit = (celsius * 9) / 5 + 32;

  return fahrenheit;
}

// assert.equal(celsiusToFahrenheit(40), 104);

//TEST CASE 9 simple if then
function isPositive(number) {
  if (number > 0) {
    return true;
  }
  return false;
}

// assert.equal(isPositive(27), true);
// assert.equal(isPositive(0), false);

function cobaSwitchCase(string) {
  let s2 = '';
  for (let i = 0; i < 2; i++) {
    switch (string) {
      case 'M':
        s2 = 1000;
        break;
      default:
        return -1;
    }
  }
  return s2;
}

// console.log(cobaSwitchCase('M'));

function editedRomanToDecimal(str) {
  // Initialize result
  var res = 0;

  for (i = 0; i < str.length; i++) {
    var s1;
    let char = str.charAt(i);
    // switch (str.charAt(i)) {
    switch (char) {
      case 'M':
        s1 = 1000;
        break;
      default:
        return 'invalid roman number';
    }

    if (i + 1 < str.length) {
      var s2;
      let char2 = str.charAt(i + 1);
      switch (char2) {
        case 'M':
          s2 = 1000;
          break;
        default:
          return 'invalid roman number';
      }

      if (s1 >= s2) {
        res = res + s1;
      } else {
        res = res + s2 - s1;
        i++;
      }
    } else {
      res = res + s1;
    }
  }
  return res;
}

// function colorTranslator(warna) {
//   switch (warna) {
//     case 'merah':
//       return 'red';
//       break;
//     case 'hijau':
//       return 'green';
//       break;
//     case 'biru':
//       return 'blue';
//       break;
//     default:
//       return 'warna tidak terdaftar';
//   }
// }

// console.log(colorTranslator());

function getSingularRomanValue(roman) {
  switch (roman) {
    case 'I':
      return 1;
      break;
    case 'V':
      return 5;
      break;
    case 'X':
      return 10;
      break;
    case 'L':
      return 50;
      break;
    case 'C':
      return 100;
      break;
    case 'D':
      return 500;
      break;
    case 'M':
      return 1000;
    default:
      return 'invalid roman value';
  }
}

// assert(getSingularRomanValue('X'), 10);
// assert(getSingularRomanValue('A'), 'invalid roman value');

function convertVocalToA(string) {
  let array = string.split('');

  let vocal = ['i', 'u', 'e', 'o'];
  for (let i = 0; i <= array.length; i++) {
    for (let j = 0; j < vocal.length; j++) {
      if (array[i] == vocal[j]) {
        array[i] = 'a';
      }
    }
  }
  return array.join('');
}

console.log(convertVocalToA('kokoronotomo'));
